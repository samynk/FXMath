package dae.math.script.functions;

import dae.math.script.AbstractScriptVariable;
import dae.math.script.ScriptValueClass;
import dae.math.script.specops.I3DValue;
import dae.math.script.specops.IMatrix3DValue;
import dae.math.script.values.Double3;
import dae.math.script.values.Matrix4f;
import dae.math.script.values.String1;

/**
 *
 * @author Koen.Samyn
 */
public class InvertMatrixFunction extends AbstractScriptVariable implements IMatrix3DValue {

    private final Matrix4f result;
    private final IMatrix3DValue toInvert;

    private final Double3 a = new Double3();
    private final Double3 b = new Double3();
    private final Double3 c = new Double3();
    private final Double3 d = new Double3();

    private final Double3 s = new Double3();
    private final Double3 t = new Double3();
    private final Double3 u = new Double3();
    private final Double3 v = new Double3();

    private final Double3 r0 = new Double3();
    private final Double3 r1 = new Double3();
    private final Double3 r2 = new Double3();
    private final Double3 r3 = new Double3();

    public InvertMatrixFunction(IMatrix3DValue matrix) {
        result = new Matrix4f();
        toInvert = matrix;
    }

    @Override
    public Matrix4f getValue() {
        return result;
    }

    @Override
    public void update() {

        double ax = toInvert.getComponent(0, 0);
        double ay = toInvert.getComponent(0, 1);
        double az = toInvert.getComponent(0, 2);
        a.set(ax, ay, az, 0);
        double x = toInvert.getComponent(0, 3);

        double bx = toInvert.getComponent(1, 0);
        double by = toInvert.getComponent(1, 1);
        double bz = toInvert.getComponent(1, 2);
        b.set(bx, by, bz, 0);
        double y = toInvert.getComponent(1, 3);

        double cx = toInvert.getComponent(2, 0);
        double cy = toInvert.getComponent(2, 1);
        double cz = toInvert.getComponent(2, 2);
        c.set(cx, cy, cz, 0);
        double z = toInvert.getComponent(2, 3);

        double dx = toInvert.getComponent(3, 0);
        double dy = toInvert.getComponent(3, 1);
        double dz = toInvert.getComponent(3, 2);
        d.set(dx, dy, dz, 0);
        double w = toInvert.getComponent(3, 3);

        a.cross(b, s);
        c.cross(d, t);

        Double3.lico(y, a, -x, b, u);
        Double3.lico(w, c, -z, d, v);

        double det = s.dot(v) + t.dot(u);
        double invDet = 1 / det;

        s.scale(invDet);
        t.scale(invDet);
        u.scale(invDet);
        v.scale(invDet);

        b.cross(v, r0);
        Double3.lico(1, r0, y, t, r0);
        v.cross(a, r1);
        Double3.lico(1, r1, -x, t, r1);
        d.cross(u, r2);
        Double3.lico(1, r2, w, s, r2);
        u.cross(c, r3);
        Double3.lico(1, r3, -z, s, r3);

        result.setComponent(0, r0, -b.dot(t));
        result.setComponent(1, r1, a.dot(t));
        result.setComponent(2, r2, -d.dot(s));
        result.setComponent(3, r3, c.dot(s));
    }

    @Override
    public Object getComponent(int index) {
        return result.getComponent(index / 4, index % 4);
    }

    @Override
    public boolean isOperation() {
        return true;
    }

    @Override
    public double getComponent(int row, int column) {
        return result.getComponent(row, column);
    }

    @Override
    public ScriptValueClass getValueClass() {
        return ScriptValueClass.UNDETERMINED;
    }

    @Override
    public void setComponent(int column, Double3 value, double w) {
        // autogenerated
    }

    @Override
    public void setComponent(int row, int column, double w) {
        // autogenerated
    }

    @Override
    public void transformPoint(I3DValue point, Double3 result) {
        this.result.transformPoint(point, result);
    }

    @Override
    public void transformVector(I3DValue vector, Double3 result) {
        this.result.transformVector(vector, result);
    }

    @Override
    public void transform(I3DValue vectorOrPoint, Double3 result) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
